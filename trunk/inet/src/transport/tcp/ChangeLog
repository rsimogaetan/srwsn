2009-10-27 Rudolf Hornig

    * Added ITCP module interface that is implemented by TCP and TCP_old

    * The old TCP (SACK-less) implementation is available as TCP_old

    * TCP (default) and TCP_old can be selected in StandardHost with the new tcpType parameter

2009-10-27 Thomas Reschka

    * implemented SACK TCP. The current SACK implementation is located
      in TCP main (and not in flavours). This means that all existing
      TCP algorithm classes may be used with SACK, although only TCPReno
      and TCPTahoe make sense.

    * implemented (SACK)-based Loss Recovery algorithm (RFC 3517)
      which is a conservative replacement of the fast recovery algorithm (RFC2581)
      integrated to TCPReno but not to TCPTahoe, TCPNoCongestionControl and DumbTCP.

    * implemented Limited Transmit algorithm (RFC 3042)
      added new module parameter (limitedTransmitEnabled) to enabled/disabled Limited Transmit algorithm (RFC 3042)
      integrated to TCPBaseAlg (can be used for TCPReno, TCPTahoe and TCPNoCongestionControl but not for DumbTCP).

    * implemented changes from RFC 2001 to RFC 2581
      - added new module parameter (increasedIWEnabled) to change initial window from one segment (RFC 2001)
        (based on MSS) to maximal four segments (min(4*MSS, max (2*MSS, 4380 bytes))) (RFC 3390).
        integrated to TCPBaseAlg (can be used for TCPReno, TCPTahoe and TCPNoCongestionControl but not for DumbTCP).
      - ACK generation (ack_now = true) RFC 2581, page 6: "(...) a TCP receiver SHOULD send an immediate ACK
        when the incoming segment fills in all or part of a gap in the sequence space."
      - Re-starting Idle Connections (TODO - NOT YET IMPLEMENTED)
        RFC 2581, pages 7 and 8: "When TCP has not received a segment for
        more than one retransmission timeout, cwnd is reduced to the value
        of the restart window (RW) before transmission begins.
        For the purposes of this standard, we define RW = IW."

    * implemented some TCP header options:
      - EOL: End of option list.
      - NOP: Padding bytes, currently needed for SACK_PERMITTED and SACK.
      - MSS: The value of snd_mss (SMSS) is set to the minimum of snd_mss
        (local parameter) and the value specified in the MSS option
        received during connection startup. Based on [RFC 2581, page 1].
      - SACK_PERMITTED: SACK can only be used if both nodes sent SACK_-
        PERMITTED during connection startup.
      - SACK: RFC 2018 and RFC 2883 are implemented, but not RFC 3517.

    * implemented flow control:
      - finite receive buffer size (initiated by parameter advertisedWindow).
        If receive buffer is exhausted (by out-of-order segments) and the
        payload length of a new received segment is higher than free receiver
        buffer, the new segment will be dropped. Such drops are recorded in
        tcpRcvQueueDropsVector.

    * NEW tcp parameters:
      - bool limitedTransmitEnabled: Limited Transmit algorithm (RFC 3042) enabled/disabled
      - bool increasedIWEnabled: increased initial window (min(4*MSS, max (2*MSS, 4380 bytes))) (RFC 3390) enabled/disabled
      - bool delayedAcksEnabled
      - bool nagleEnabled
      - bool sackSupport
  
    * NEW tcp vectors:
      - pipeVector ("pipe"): current sender's estimate of bytes outstanding in the network
      - sackedBytesVector ("rcvd sackedBytes"): current number of received sacked bytes
      - numRtosVector ("numRTOs"): total number of RTOs
      - rcvAdvVector ("advertised window"): current advertised window
      - rcvWndVector ("receive window"): current receive window
      - sndGapsVector ("snd_gaps"): current number of gaps seen by sender
      - dupAcksVector ("rcvd dupAcks"): current number of received dupAcks
      - sndSacksVector ("sent sacks"): total number of sent SACK blocks
      - rcvSacksVector ("rcvd sacks"): total number of received SACK blocks
      - rcvOooSegVector ("rcvd oooseg"): total number of received out-of-
        order segments
      - tcpRcvQueueBytesVector ("tcpRcvQueueBytes"): current amount of used
        bytes in tcp receive queue
      - tcpRcvQueueDropsVector ("tcpRcvQueueDrops"): total number of drops
        in tcp receive queue

    * NEW tcp examples:
      - inet/examples/inet/ber
        To demonstrate SACK's impact on throughput. The ber (bit error rate) of the channel
        between client and server depends on the selected configuration.
      - inet/examples/inet/tcpSack
        The dropsGenerator at client's PPP interface deletes certain DATA
        packets. On server side a second dropsGenerator deletes certain
        ACK packets in configs 1-5. For config 6 the node type of the server
        must be changed to 'StandardHostWithDLDuplicatesGenerator' in ned
        file to duplicate certain received DATA packets.
        Different configurations reflect examples from RFC 2018 and RFC 2883
        to evaluate the implementation of optional selective acknowledgment.
      - inet/examples/extInterface/extServer
        In this example the network consists of one client, one router,
        one internal server and one external (real) server. The client sends
        100 MB of data to the external server using TCP for uplink traffic.
        For downlink traffic the external server may send data to the
        internal server.

    * Other changes:
      - TCPReno and TCPTahoe use new constant DUPTHRESH (=3) to trigger retransmission (RFC 3517).
      - implemented PERSIST timer. If data sender receives a zero window and
        the REXMIT timer is not running, the PERSIST timer is started.
      - Restart of REXMIT timer on retransmission is not part of RFC 2581, however optional in RFC 3517 if sent during recovery.
        This has been FIXED in TCPReno and TCPTahoe.
        REXMIT timer management is discussed in RFC 2582/3782 (NewReno) and RFC 2988.
      - CHANGED parts of previous SACK implementation (adding recently reported SACKs from sacks_array to header).
      - CHANGED method to retransmit data after RTO (for TCPReno and TCPTahoe).
      - Added missing parts in TCPConnection::updateRcvWnd(). Based on [Stevens, W.R.: TCP/IP Illustrated, Volume 2, pages 878-879].
      - new module parameter 'delayedAcksEnabled' added to enable/disable
        (optional) delayed ACKs.
      - changed the implementation of delayed ACKs. Full sized segments are
        counted and ack_now bit is set to generate immediate ACK in certain
        cases.
        Based on [Stevens, W.R.: TCP/IP Illustrated, Volume 2, page 861].
      - new module parameter 'nagleEnabled' added to enable/disable (optional)
        Nagle's algorithm. The Nagle's algorithm is unchanged and is possibly
        not precisely implemented.
      - FIXED behavior of TCPReno after RTO. After REXMIT timeout TCP Reno
        should start slow start with snd_cwnd = snd_mss. If calling
        "retransmitData();" there is no rexmit limitation (bytesToSend > snd_cwnd)
        therefore "retransmitOneSegment();" needs to be used. After receiving
        ACK, "retransmitDataAfterRto(state->snd_cwnd);" will be called to rexmit
        outstanding data.
      - Slightly CHANGED utility function "isSegmentAcceptable" (check
        that segment entirely falls in receive window).
        Based on [RFC 793, page 69].
      - CHANGED data type of some state variables (e.g. snd_wnd, snd_mss)
        from int/uint to uint32 to simplify use of standard functions
        (e.g. std::min).
      - sending window probes. If PERSIST timer is expired a window probe is
        sent to request a window update.
      - slightly changed the update of window information (snd_wnd, snd_wl1, snd_wl2).
        Based on [Stevens, W.R.: TCP/IP Illustrated, Volume 2, page 982].
      - update receive window. The data receiver updates all receiver queue
        related variables before sending (ACK/SACK or DATA) to advertise
        the currently free amount of bytes of its finite receive buffer,
        thus data receiver is able to advertise a zero window.
        Based on [Stevens, W.R.: TCP/IP Illustrated, Volume 2, pages 878-879].

2009-10-17 Rudolf Hornig

	* Fixed assert issue with pacth submitted by Kyeong Soo (Joseph) Kim. See bug #110

2009-03-01 Andras Varga

	* fixed bug in TCPConnection::retransmitData(); patch from Claus Faller

2008-06-29 Andras Varga

	* some refactoring: created factory methods for TCPSegment and 
	TCPConnection, to allow customizing them via subclassing

2006-03-22 Andras Varga

	* TCPConnectionEventProc.cc, TCPConnectionRcvSegment.cc: when the user
	issues CLOSE, defer transition to FIN_WAIT_1 until all data are sent.
	(Before this fix the transiton was made immediately, but that was 
	harmless, i.e. it didn't affect TCP's external behaviour.)

2006-03-21 Andras Varga

	* TCPConnectionRcvSegment.cc: fixed incorrect behaviour when ACK of SYN
	carries data [reported by Joachim Meichle]

2005-07-20 Andras Varga

	* some sources moved into subdirs queues/ and flavours/

2005-07-14 Andras Varga

	* TCPMain renamed to TCP

2005-07-12  Andras Varga

	* TCPMain.cc, TCPConnectionBase.cc: TCP got confused when it received 
	several active/passive opens with same local port number. Now it raises
	an error (this is like EADDRINUSE on *nix)

2005-07-06  Andras Varga

	* TCPConnectionRcvSegment.cc: fixed bug which caused closing of a
	connection to be reported 2MSL (240s) later to the user. Basically,
	the user has to be notified already when the connection enters the
	TIME_WAIT state. (TCP stays in TIME_WAIT for 240s or longer, and 
	nothing can happen during that time that's of interest to the user.)
